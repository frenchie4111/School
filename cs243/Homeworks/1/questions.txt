Lab 1: System Intro
Name: Michael Lyons (mdl7240)

1. When you first log in, what is the absolute path of your home directory?

	/home/stu9/s11/mdl7240/:	

2. What command do you use to display the contents of your current
working directory, such that it shows the difference between
files and directories?

   ls 

3. What command would you use to change your working directory from
your home directory to the existing subdirectory Courses/?

   cd 

4. Within the Courses/ subdirectory, what command would you use to
create the subdirectory CS4/ for this course?

   mkdir CS4 

5. When warning.c is compiled as: 
        gcc -c warning.c
    There is no indication of any warnings/problems.
    
    a.) What compiler flag is used to enable the display of warnings?
    
	-Wall (All warnings)    

    b.) Explain, in your own words, all the warnings in warning.c.
    
	warning.c: In function 'compute':
	warning.c:4:6: warning: unused variable 'b' [-Wunused-variable]
		The variable b is being declared but not being used for 
		anything useful.
	warning.c: At top level:
	warning.c:7:5: warning: 'main' takes only zero or two arguments [-Wmain]
		The main function has the wrong number of arguments. The 
		only choices are 2 or 0 arguments.
	warning.c: In function 'main':
	warning.c:8:6: warning: unused variable 'x' [-Wunused-variable]
		Same things as the first warning. The variable b is not being 
		used for anything useful after it is declared.
	warning.c: In function 'compute':
	warning.c:5:1: warning: control reaches end of non-void function [-Wreturn-type]	
		The function is not returning anything before reaching the end
		 of the function.
    
    c.) Fix warning.c so it compiles without warning and runs correctly.

6. What compiler flag is used to compile C programs using the ISO C99 
standard?

  -std=c99
 
7. Put the four steps of compilation process into their proper order from
first to last.

    A. Assemble
    B. Link
    C. Preprocess
    D. Compile
    
	Preprocess
	Compile
	Assemble
	Link

8. Given the program files main.c, circle.h and circle.c.
    a.) What commands would you use to compile the source files
        into object files?
        
	gcc -c main.c circle.c
        
    b.) What command would you use to link the object files 
        into an executable named broken?
    
	gcc -o broken main.o circle.o    
        
    c.) Explain why the program compiles but does not link.
    
	The function that circle.h "promises" getArea, is not defined anwhere 
	in our .c files (There is a function that is named getAreas in 
	circle.c, so it was probably just a typo) so when the program tried
	to link it could not find an assembled defintion of getArea.
